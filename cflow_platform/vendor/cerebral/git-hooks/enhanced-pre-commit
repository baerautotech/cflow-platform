#!/bin/bash
# üè¢ ENTERPRISE PRE-COMMIT HOOK v2.0
# Enhanced validation with database integration and RAG-aware processing
# Maintains enterprise standards and prevents organizational violations

set -euo pipefail

echo "üõ°Ô∏è Running enhanced enterprise validation..."

# Configuration
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
BACKEND_DIR="$PROJECT_ROOT/backend-python"
VENV_PATH="$PROJECT_ROOT/.venv"
LOG_FILE="$PROJECT_ROOT/.cerebraflow/logs/pre-commit-validation.log"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Logging function
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    log_message "‚ùå PRE-COMMIT ERROR: $1"
    echo "‚ö†Ô∏è  Pre-commit validation failed"
    echo "   Check log file: $LOG_FILE"
    exit 1
}

log_message "üöÄ Starting enterprise pre-commit validation"

# 1. SECURITY VALIDATION
log_message "üîí Running security validation..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -n "$STAGED_FILES" ]; then
    log_message "Validating security for $(echo "$STAGED_FILES" | wc -l) Python files..."
    
    # Check if security monitoring system exists
    SECURITY_SCRIPT="$BACKEND_DIR/services/security/continuous_security_monitoring_system.py"
    if [ -f "$SECURITY_SCRIPT" ]; then
        if ! python "$SECURITY_SCRIPT" validate "$STAGED_FILES" 2>/dev/null; then
            handle_error "Security validation failed. Review staged Python files for security violations."
        fi
        log_message "‚úÖ Security validation passed"
    else
        log_message "‚ö†Ô∏è  Security monitoring system not found, skipping security validation"
    fi
else
    log_message "‚ÑπÔ∏è  No Python files staged for security validation"
fi

# 3. PYTHON SYNTAX VALIDATION (LINTING)
log_message "üêç Validating Python syntax..."
if [ -n "$STAGED_FILES" ]; then
    log_message "Checking syntax for staged Python files..."
    SYNTAX_ERRORS=false
    for FILE in $STAGED_FILES; do
        if [ -f "$FILE" ]; then
            # Use python -m py_compile to check for syntax errors
            if ! python -m py_compile "$FILE"; then
                log_message "‚ùå Syntax error in $FILE"
                SYNTAX_ERRORS=true
            fi
        fi
    done

    if [ "$SYNTAX_ERRORS" = true ]; then
        handle_error "Python syntax errors found. Please fix them before committing."
    fi
    log_message "‚úÖ Python syntax validation passed"
else
    log_message "‚ÑπÔ∏è  No Python files to check for syntax."
fi


# 2. FILE ORGANIZATION VALIDATION
log_message "üìÅ Validating file organization..."

# Check for violations in root directory
ROOT_VIOLATIONS=$(git diff --cached --name-only --diff-filter=A | grep -E '^[^/]+\.(py|json|sql|log|txt|sh|yml|yaml)$' | grep -v -E '^(README\.md|package\.json|package-lock\.json|pyproject\.toml|uv\.lock|tsconfig.*\.json|activate\.(sh|bat)|components\.json|cerebraflow_.*\.json|.*\.lock)$' || true)

if [ -n "$ROOT_VIOLATIONS" ]; then
    log_message "‚ùå FILE ORGANIZATION VIOLATION: Files being added to root directory"
    echo "   Violating files:"
    echo "$ROOT_VIOLATIONS" | sed 's/^/     /'
    echo ""
    echo "   üìã These files must be placed in appropriate directories:"
    echo "     - Python files: backend-python/, scripts/, .cerebraflow/"
    echo "     - JSON files: config/, data/, backend-python/config/"
    echo "     - SQL files: database/migrations/, migrations/, supabase/migrations/"
    echo "     - Documentation: docs/ (CEREBRAL_XXX_TOPIC.md format)"
    echo "     - Shell scripts: scripts/, infrastructure/scripts/"
    echo ""
    echo "   üîß Run: python emergency_file_organization_cleanup.py"
    handle_error "File organization violations detected"
fi

log_message "‚úÖ File organization validation passed"

# 3. DOCUMENTATION NAMING VALIDATION
log_message "üìù Checking documentation naming conventions..."
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

if [ -n "$STAGED_MD_FILES" ]; then
    log_message "Validating naming for $(echo "$STAGED_MD_FILES" | wc -l) documentation files..."
    
    # Check if documentation naming validator exists
    DOC_VALIDATOR="$PROJECT_ROOT/.cerebraflow/scripts/fix_documentation_naming_violations.py"
    if [ -f "$DOC_VALIDATOR" ]; then
        if ! python "$DOC_VALIDATOR" --check-only 2>/dev/null; then
            echo ""
            echo "‚ùå Documentation naming violations found"
            echo "üí° Fix with: python .cerebraflow/scripts/fix_documentation_naming_violations.py --fix"
            echo ""
            echo "üìã Documentation naming requirements:"
            echo "   - Must follow CEREBRAL_XXX_CATEGORY_TOPIC.md format"
            echo "   - Must be in docs/ directory"
            echo "   - Use next available number sequence"
            handle_error "Documentation naming violations detected"
        fi
        log_message "‚úÖ Documentation naming validation passed"
    else
        log_message "‚ö†Ô∏è  Documentation naming validator not found, skipping validation"
    fi
else
    log_message "‚ÑπÔ∏è  No documentation files staged for naming validation"
fi

# 4. DATABASE INTEGRATION VALIDATION
log_message "üíæ Validating database integration readiness..."

# Check if virtual environment exists for database operations
if [ ! -d "$VENV_PATH" ]; then
    log_message "‚ö†Ô∏è  Python virtual environment not found at $VENV_PATH"
    log_message "   Database integration validation skipped"
else
    # Check if database connection services are available
    TENANT_SERVICE="$BACKEND_DIR/services/hybrid_tenant_service.py"
    AUTODOC_SERVICE="$BACKEND_DIR/services/enhanced_autodoc_integration_service.py"
    
    if [ -f "$TENANT_SERVICE" ] && [ -f "$AUTODOC_SERVICE" ]; then
        log_message "‚úÖ Database integration services available"
        log_message "   - HybridTenantService: Ready"
        log_message "   - EnhancedAutoDocIntegrationService: Ready"
    else
        log_message "‚ö†Ô∏è  Some database integration services not found:"
        [ ! -f "$TENANT_SERVICE" ] && log_message "   - Missing: HybridTenantService"
        [ ! -f "$AUTODOC_SERVICE" ] && log_message "   - Missing: EnhancedAutoDocIntegrationService"
    fi
fi

# 5. RAG SYSTEM READINESS VALIDATION
log_message "üß† Validating RAG system readiness..."

# Check ChromaDB setup
CHROMADB_PATH="$PROJECT_ROOT/.cerebraflow/core/storage/chromadb"
if [ -d "$CHROMADB_PATH" ]; then
    log_message "‚úÖ ChromaDB storage directory exists"
else
    log_message "‚ö†Ô∏è  ChromaDB storage directory not found"
fi

# Check vectorization service
VECTORIZATION_SERVICE="$BACKEND_DIR/services/enterprise_codebase_vectorization_service.py"
if [ -f "$VECTORIZATION_SERVICE" ]; then
    log_message "‚úÖ Codebase vectorization service available"
else
    log_message "‚ö†Ô∏è  Codebase vectorization service not found"
fi

# 6. ENTERPRISE COMPLIANCE CHECK
log_message "üè¢ Running enterprise compliance checks..."

# Check for tenant isolation in staged files
if [ -n "$STAGED_FILES" ]; then
    # Look for potential tenant isolation violations
    TENANT_VIOLATIONS=$(git diff --cached | grep -E "^\+.*" | grep -v "tenant_id\|tenant\." | grep -E "(SELECT|INSERT|UPDATE|DELETE).*FROM" || true)
    
    if [ -n "$TENANT_VIOLATIONS" ]; then
        log_message "‚ö†Ô∏è  Potential tenant isolation violations detected in SQL operations"
        log_message "   Ensure all database operations include proper tenant isolation"
    fi
fi

log_message "‚úÖ Enterprise compliance checks completed"

# 0. GATE REGISTRY ENFORCEMENT
log_message "üö¶ Checking gate registry enforcement..."
RUNNER="$PROJECT_ROOT/.cerebraflow/validation/gate_registry.py"
if [ -f "$RUNNER" ]; then
  if ! python "$RUNNER" check-latest; then
    handle_error "Gate registry not green. Commit blocked. Run the workflow gates and ensure green before committing."
  fi
else
  log_message "‚ÑπÔ∏è  Gate registry script not found; skipping gate enforcement"
fi

# 7. FINAL VALIDATION SUMMARY
log_message "üìä Pre-commit validation summary:"
log_message "   üîí Security validation: ‚úÖ"
log_message "   üìÅ File organization: ‚úÖ" 
log_message "   üìù Documentation naming: ‚úÖ"
log_message "   üíæ Database integration: ‚úÖ"
log_message "   üß† RAG system readiness: ‚úÖ"
log_message "   üè¢ Enterprise compliance: ‚úÖ"

echo ""
echo "‚úÖ Enhanced pre-commit validation complete!"
echo "üìã Ready for commit with enterprise standards compliance"
log_message "üéâ Pre-commit validation completed successfully"

# 8. ENTERPRISE PATTERN GUARDRAILS (Phase 0)
# -----------------------------------------
# Forbid duplicate BaseEnterpriseService declarations outside unified core file
# Forbid legacy wrapper patterns (_impl/_sync) in services during migration window

GUARDRAIL_ERRORS=false

# Collect staged Python files again (additions/changes)
STAGED_PY=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -n "$STAGED_PY" ]; then
  for FILE in $STAGED_PY; do
    # Skip deleted/missing files
    [ ! -f "$FILE" ] && continue

    # Block duplicate BaseEnterpriseService class declarations
    if grep -q "class BaseEnterpriseService\b" "$FILE"; then
      if [ "$FILE" != "backend-python/services/core/base_enterprise_service.py" ]; then
        echo ""
        echo "‚ùå Guardrail violation: Duplicate BaseEnterpriseService declaration"
        echo "   File: $FILE"
        echo "   Only 'backend-python/services/core/base_enterprise_service.py' may define this class."
        GUARDRAIL_ERRORS=true
      fi
    fi

    # Block legacy wrapper patterns in services (outside the unified base)
    case "$FILE" in 
      backend-python/services/*)
        if [ "$FILE" != "backend-python/services/core/base_enterprise_service.py" ]; then
          if grep -Eqs "def\s+_[A-Za-z0-9]+_impl\s*\(" "$FILE" || \
             grep -Eqs "def\s+_[A-Za-z0-9]+_sync\s*\(" "$FILE"; then
            echo ""
            echo "‚ùå Guardrail violation: Legacy execute_operation wrapper pattern (_impl/_sync) detected"
            echo "   File: $FILE"
            echo "   Replace with direct async methods and use the enterprise coordinator when transforming sync calls."
            GUARDRAIL_ERRORS=true
          fi

          # Inheritance gate: require services to inherit unified BaseEnterpriseService
          if grep -Eq "class\s+\w+Service\b" "$FILE"; then
            if ! grep -Eq "class\s+\w+Service\s*\(BaseEnterpriseService" "$FILE"; then
              echo ""
              echo "‚ùå Guardrail violation: Service must inherit BaseEnterpriseService"
              echo "   File: $FILE"
              echo "   Ensure: class YourService(BaseEnterpriseService):"
              GUARDRAIL_ERRORS=true
            fi
          fi

          # Tenant isolation gate: require tenant_id reference in services
          if ! grep -q "tenant_id" "$FILE"; then
            echo ""
            echo "‚ùå Guardrail violation: Tenant isolation missing (tenant_id not found)"
            echo "   File: $FILE"
            echo "   Ensure constructors and I/O methods accept and propagate tenant_id."
            GUARDRAIL_ERRORS=true
          fi

          # Error handling gate: require at least one except block for public methods
          if ! grep -q "except\s" "$FILE"; then
            echo ""
            echo "‚ùå Guardrail violation: Error handling required (no except block found)"
            echo "   File: $FILE"
            echo "   Add try/except with structured logging around public operations."
            GUARDRAIL_ERRORS=true
          fi
        fi
      ;;
    esac
  done
fi

if [ "$GUARDRAIL_ERRORS" = true ]; then
  handle_error "Enterprise guardrails violations detected. See messages above."
fi

exit 0 