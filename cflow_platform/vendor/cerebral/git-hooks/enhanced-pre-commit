#!/bin/bash
# 🏢 ENTERPRISE PRE-COMMIT HOOK v2.0
# Enhanced validation with database integration and RAG-aware processing
# Maintains enterprise standards and prevents organizational violations

set -euo pipefail

echo "🛡️ Running enhanced enterprise validation..."

# Configuration
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
BACKEND_DIR="$PROJECT_ROOT/backend-python"
VENV_PATH="$PROJECT_ROOT/.venv"
LOG_FILE="$PROJECT_ROOT/.cerebraflow/logs/pre-commit-validation.log"

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Resolve Python runner strictly from project env
if command -v uv >/dev/null 2>&1; then
  PY_RUN=(uv run -q python)
else
  PY_RUN=("$VENV_PATH/bin/python")
fi

# Logging function
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    log_message "❌ PRE-COMMIT ERROR: $1"
    echo "⚠️  Pre-commit validation failed"
    echo "   Check log file: $LOG_FILE"
    exit 1
}

log_message "🚀 Starting enterprise pre-commit validation"

# 1. SECURITY VALIDATION
log_message "🔒 Running security validation..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -n "$STAGED_FILES" ]; then
    log_message "Validating security for $(echo "$STAGED_FILES" | wc -l) Python files..."
    SECURITY_SCRIPT="$BACKEND_DIR/services/security/continuous_security_monitoring_system.py"
    if [ -f "$SECURITY_SCRIPT" ]; then
        if ! "${PY_RUN[@]}" "$SECURITY_SCRIPT" validate "$STAGED_FILES" 2>/dev/null; then
            handle_error "Security validation failed. Review staged Python files for security violations."
        fi
        log_message "✅ Security validation passed"
    else
        log_message "⚠️  Security monitoring system not found, skipping security validation"
    fi
else
    log_message "ℹ️  No Python files staged for security validation"
fi

# 3. PYTHON SYNTAX VALIDATION (LINTING)
log_message "🐍 Validating Python syntax..."
if [ -n "$STAGED_FILES" ]; then
    log_message "Checking syntax for staged Python files..."
    SYNTAX_ERRORS=false
    for FILE in $STAGED_FILES; do
        if [ -f "$FILE" ]; then
            if ! "${PY_RUN[@]}" -m py_compile "$FILE"; then
                log_message "❌ Syntax error in $FILE"
                SYNTAX_ERRORS=true
            fi
        fi
    done

    if [ "$SYNTAX_ERRORS" = true ]; then
        handle_error "Python syntax errors found. Please fix them before committing."
    fi
    log_message "✅ Python syntax validation passed"
else
    log_message "ℹ️  No Python files to check for syntax."
fi

# 2. FILE ORGANIZATION VALIDATION
log_message "📁 Validating file organization..."
ROOT_VIOLATIONS=$(git diff --cached --name-only --diff-filter=A | grep -E '^[^/]+\.(py|json|sql|log|txt|sh|yml|yaml)$' | grep -v -E '^(README\.md|package\.json|package-lock\.json|pyproject\.toml|uv\.lock|tsconfig.*\.json|activate\.(sh|bat)|components\.json|cerebraflow_.*\.json|.*\.lock)$' || true)

if [ -n "$ROOT_VIOLATIONS" ]; then
    log_message "❌ FILE ORGANIZATION VIOLATION: Files being added to root directory"
    echo "   Violating files:"
    echo "$ROOT_VIOLATIONS" | sed 's/^/     /'
    echo ""
    echo "   📋 These files must be placed in appropriate directories:"
    echo "     - Python files: backend-python/, scripts/, .cerebraflow/"
    echo "     - JSON files: config/, data/, backend-python/config/"
    echo "     - SQL files: database/migrations/, migrations/, supabase/migrations/"
    echo "     - Documentation: docs/ (CEREBRAL_XXX_TOPIC.md format)"
    echo "     - Shell scripts: scripts/, infrastructure/scripts/"
    echo ""
    echo "   🔧 Run: uv run python emergency_file_organization_cleanup.py"
    handle_error "File organization violations detected"
fi

log_message "✅ File organization validation passed"

# 3. DOCUMENTATION NAMING VALIDATION
log_message "📝 Checking documentation naming conventions..."
STAGED_MD_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.md$' || true)

if [ -n "$STAGED_MD_FILES" ]; then
    log_message "Validating naming for $(echo "$STAGED_MD_FILES" | wc -l) documentation files..."
    DOC_VALIDATOR="$PROJECT_ROOT/.cerebraflow/scripts/fix_documentation_naming_violations.py"
    if [ -f "$DOC_VALIDATOR" ]; then
        if ! "${PY_RUN[@]}" "$DOC_VALIDATOR" --check-only 2>/dev/null; then
            echo ""
            echo "❌ Documentation naming violations found"
            echo "💡 Fix with: uv run python .cerebraflow/scripts/fix_documentation_naming_violations.py --fix"
            echo ""
            echo "📋 Documentation naming requirements:"
            echo "   - Must follow CEREBRAL_XXX_CATEGORY_TOPIC.md format"
            echo "   - Must be in docs/ directory"
            echo "   - Use next available number sequence"
            handle_error "Documentation naming violations detected"
        fi
        log_message "✅ Documentation naming validation passed"
    else
        log_message "⚠️  Documentation naming validator not found, skipping validation"
    fi
else
    log_message "ℹ️  No documentation files staged for naming validation"
fi

# Remaining steps unchanged but ensure python calls use PY_RUN
# 4. DATABASE INTEGRATION VALIDATION
log_message "💾 Validating database integration readiness..."
if [ ! -d "$VENV_PATH" ]; then
    log_message "⚠️  Python virtual environment not found at $VENV_PATH"
    log_message "   Database integration validation skipped"
else
    TENANT_SERVICE="$BACKEND_DIR/services/hybrid_tenant_service.py"
    AUTODOC_SERVICE="$BACKEND_DIR/services/enhanced_autodoc_integration_service.py"
    if [ -f "$TENANT_SERVICE" ] && [ -f "$AUTODOC_SERVICE" ]; then
        log_message "✅ Database integration services available"
    else
        log_message "⚠️  Some database integration services not found:"
        [ ! -f "$TENANT_SERVICE" ] && log_message "   - Missing: HybridTenantService"
        [ ! -f "$AUTODOC_SERVICE" ] && log_message "   - Missing: EnhancedAutoDocIntegrationService"
    fi
fi

# 5. RAG SYSTEM READINESS VALIDATION (unchanged)
CHROMADB_PATH="$PROJECT_ROOT/.cerebraflow/core/storage/chromadb"
if [ -d "$CHROMADB_PATH" ]; then
    log_message "✅ ChromaDB storage directory exists"
else
    log_message "⚠️  ChromaDB storage directory not found"
fi

VECTORIZATION_SERVICE="$BACKEND_DIR/services/enterprise_codebase_vectorization_service.py"
if [ -f "$VECTORIZATION_SERVICE" ]; then
    log_message "✅ Codebase vectorization service available"
else
    log_message "⚠️  Codebase vectorization service not found"
fi

# 6. ENTERPRISE COMPLIANCE CHECK (unchanged aside from messaging)
# ... keep original checks, no direct python invocations here ...

log_message "✅ Enterprise compliance checks completed"

# Gate registry (use PY_RUN)
RUNNER="$PROJECT_ROOT/.cerebraflow/validation/gate_registry.py"
if [ -f "$RUNNER" ]; then
  if ! "${PY_RUN[@]}" "$RUNNER" check-latest; then
    handle_error "Gate registry not green. Commit blocked. Run the workflow gates and ensure green before committing."
  fi
else
  log_message "ℹ️  Gate registry script not found; skipping gate enforcement"
fi

log_message "📊 Pre-commit validation summary:"
log_message "   🔒 Security validation: ✅"
log_message "   📁 File organization: ✅"
log_message "   📝 Documentation naming: ✅"
log_message "   💾 Database integration: ✅"
log_message "   🧠 RAG system readiness: ✅"
log_message "   🏢 Enterprise compliance: ✅"

echo ""
echo "✅ Enhanced pre-commit validation complete!"
echo "📋 Ready for commit with enterprise standards compliance"
log_message "🎉 Pre-commit validation completed successfully"

# Guardrails block unchanged
# ...

exit 0 