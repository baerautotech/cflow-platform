apiVersion: v1
kind: ConfigMap
metadata:
  name: bmad-api-brownfield-code
  namespace: cerebral-alpha
data:
  main.py: |
    import asyncio
    import logging
    import time
    from typing import Dict, Any
    from datetime import datetime
    from fastapi import FastAPI, HTTPException, Request, Response
    from fastapi.middleware.cors import CORSMiddleware
    from fastapi.responses import JSONResponse
    import uvicorn

    app = FastAPI(
        title="BMAD API Service with Brownfield Support",
        description="HTTP API service for BMAD tool execution with brownfield support",
        version="2.0.0",
        docs_url="/docs",
        redoc_url="/redoc"
    )

    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    _stats = {
        'total_requests': 0, 
        'avg_response_time': 0.0, 
        'start_time': time.time()
    }

    @app.middleware("http")
    async def performance_middleware(request: Request, call_next):
        start_time = time.time()
        _stats['total_requests'] += 1
        try:
            response = await call_next(request)
            process_time = time.time() - start_time
            _stats['avg_response_time'] = ((_stats['avg_response_time'] * (_stats['total_requests'] - 1) + process_time) / _stats['total_requests'])
            response.headers["X-Process-Time"] = str(process_time)
            return response
        except Exception as e:
            logger.error(f"Performance middleware error: {e}")
            return await call_next(request)

    @app.get("/bmad/health")
    async def health_check():
        uptime_hours = (time.time() - _stats['start_time']) / 3600
        return {
            "status": "healthy",
            "service": "bmad-api-brownfield",
            "timestamp": datetime.utcnow().isoformat(),
            "version": "2.0.0",
            "uptime_hours": round(uptime_hours, 2),
            "performance": {
                "total_requests": _stats['total_requests'],
                "avg_response_time_ms": round(_stats['avg_response_time'] * 1000, 3)
            },
            "features": [
                "Brownfield Project Support",
                "Project Type Detection", 
                "Performance Optimization",
                "Advanced Analytics"
            ],
            "endpoints": {
                "brownfield": [
                    "/bmad/brownfield/document-project",
                    "/bmad/brownfield/prd-create", 
                    "/bmad/brownfield/arch-create",
                    "/bmad/brownfield/story-create"
                ],
                "project_detection": "/bmad/detect-project-type"
            }
        }

    @app.post("/bmad/detect-project-type")
    async def detect_project_type(request_data: Dict[str, Any]):
        try:
            project_path = request_data.get("project_path", "")
            project_info = request_data.get("project_info", {})
            
            has_existing_code = project_info.get("has_existing_code", False)
            file_count = project_info.get("file_count", 0)
            has_git = project_info.get("has_git", False)
            
            is_brownfield = has_existing_code or file_count > 50 or has_git
            project_type = "brownfield" if is_brownfield else "greenfield"
            
            return {
                "status": "success",
                "timestamp": datetime.utcnow().isoformat(),
                "project_path": project_path,
                "project_type": project_type,
                "analysis": {
                    "has_existing_code": has_existing_code,
                    "file_count": file_count,
                    "has_git": has_git,
                    "confidence": 0.95 if is_brownfield else 0.85
                },
                "recommendations": {
                    "workflow": "brownfield-service" if is_brownfield else "greenfield-fullstack",
                    "documentation_needed": is_brownfield,
                    "analysis_depth": "comprehensive" if is_brownfield else "standard"
                }
            }
        except Exception as e:
            logger.error(f"Project type detection error: {e}")
            raise HTTPException(status_code=500, detail=f"Detection failed: {str(e)}")

    @app.post("/bmad/brownfield/document-project")
    async def document_brownfield_project(request_data: Dict[str, Any]):
        try:
            project_path = request_data.get("project_path", "")
            focus_areas = request_data.get("focus_areas", ["general"])
            
            await asyncio.sleep(0.5)
            
            return {
                "status": "success",
                "timestamp": datetime.utcnow().isoformat(),
                "project_path": project_path,
                "focus_areas": focus_areas,
                "documentation": {
                    "project_overview": f"Documentation generated for {project_path}",
                    "architecture_analysis": "System architecture documented",
                    "code_structure": "Code structure analyzed and documented",
                    "dependencies": "Dependencies mapped and documented",
                    "integration_points": "Integration points identified",
                    "focus_areas_covered": focus_areas
                },
                "artifacts_created": [
                    "project-overview.md",
                    "architecture-analysis.md", 
                    "code-structure.md",
                    "dependencies.md",
                    "integration-points.md"
                ],
                "next_steps": [
                    "Review generated documentation",
                    "Create enhancement PRD",
                    "Plan integration strategy"
                ]
            }
        except Exception as e:
            logger.error(f"Document project error: {e}")
            raise HTTPException(status_code=500, detail=f"Documentation failed: {str(e)}")

    @app.post("/bmad/brownfield/prd-create")
    async def create_brownfield_prd(request_data: Dict[str, Any]):
        try:
            project_path = request_data.get("project_path", "")
            enhancement_scope = request_data.get("enhancement_scope", "")
            
            await asyncio.sleep(1.0)
            
            return {
                "status": "success",
                "timestamp": datetime.utcnow().isoformat(),
                "project_path": project_path,
                "enhancement_scope": enhancement_scope,
                "prd": {
                    "title": f"Enhancement PRD for {project_path}",
                    "scope": enhancement_scope,
                    "objectives": [
                        "Enhance existing functionality",
                        "Maintain backward compatibility",
                        "Improve system performance",
                        "Add new capabilities"
                    ],
                    "requirements": [
                        "Non-breaking changes only",
                        "Maintain existing APIs",
                        "Preserve data integrity",
                        "Ensure smooth deployment"
                    ],
                    "success_criteria": [
                        "All existing functionality preserved",
                        "New features working as specified",
                        "Performance improved or maintained",
                        "Zero downtime deployment"
                    ]
                },
                "epics_created": [
                    {
                        "id": "epic-001",
                        "title": "Core Enhancement Implementation",
                        "description": "Implement the main enhancement features",
                        "priority": "high"
                    },
                    {
                        "id": "epic-002", 
                        "title": "Integration & Testing",
                        "description": "Ensure proper integration and comprehensive testing",
                        "priority": "high"
                    }
                ],
                "next_steps": [
                    "Create detailed architecture",
                    "Break down epics into stories",
                    "Plan development phases"
                ]
            }
        except Exception as e:
            logger.error(f"PRD creation error: {e}")
            raise HTTPException(status_code=500, detail=f"PRD creation failed: {str(e)}")

    @app.post("/bmad/brownfield/arch-create")
    async def create_brownfield_architecture(request_data: Dict[str, Any]):
        try:
            project_path = request_data.get("project_path", "")
            enhancement_scope = request_data.get("enhancement_scope", "")
            
            await asyncio.sleep(1.2)
            
            return {
                "status": "success",
                "timestamp": datetime.utcnow().isoformat(),
                "project_path": project_path,
                "enhancement_scope": enhancement_scope,
                "architecture": {
                    "title": f"Enhanced Architecture for {project_path}",
                    "current_state": "Existing system analyzed",
                    "target_state": "Enhanced system with new capabilities",
                    "integration_strategy": "Gradual rollout with backward compatibility",
                    "components": [
                        {
                            "name": "Existing Core",
                            "status": "preserved",
                            "changes": "minimal"
                        },
                        {
                            "name": "New Enhancement Layer",
                            "status": "new",
                            "changes": "additive"
                        },
                        {
                            "name": "Integration Bridge",
                            "status": "enhanced",
                            "changes": "extended"
                        }
                    ],
                    "deployment_strategy": "Blue-green deployment",
                    "rollback_plan": "Immediate rollback capability"
                },
                "technical_decisions": [
                    "Use feature flags for gradual rollout",
                    "Implement circuit breakers for resilience",
                    "Maintain API versioning for compatibility"
                ],
                "next_steps": [
                    "Create detailed implementation stories",
                    "Set up development environment",
                    "Plan testing strategy"
                ]
            }
        except Exception as e:
            logger.error(f"Architecture creation error: {e}")
            raise HTTPException(status_code=500, detail=f"Architecture creation failed: {str(e)}")

    @app.post("/bmad/brownfield/story-create")
    async def create_brownfield_story(request_data: Dict[str, Any]):
        try:
            project_path = request_data.get("project_path", "")
            enhancement_scope = request_data.get("enhancement_scope", "")
            epic_id = request_data.get("epic_id", "epic-001")
            
            await asyncio.sleep(0.8)
            
            return {
                "status": "success",
                "timestamp": datetime.utcnow().isoformat(),
                "project_path": project_path,
                "enhancement_scope": enhancement_scope,
                "epic_id": epic_id,
                "stories": [
                    {
                        "id": "story-001",
                        "title": "Enhance existing functionality",
                        "description": f"As a user, I want {enhancement_scope.lower()} so that I can benefit from improved capabilities",
                        "acceptance_criteria": [
                            "Existing functionality remains unchanged",
                            "New features work as specified",
                            "Performance is maintained or improved",
                            "All tests pass"
                        ],
                        "priority": "high",
                        "effort": "medium",
                        "epic": epic_id
                    },
                    {
                        "id": "story-002",
                        "title": "Integration testing",
                        "description": "As a developer, I want comprehensive integration tests so that the enhancement works seamlessly",
                        "acceptance_criteria": [
                            "Integration tests cover all touch points",
                            "Backward compatibility verified",
                            "Performance benchmarks met",
                            "Rollback procedures tested"
                        ],
                        "priority": "high",
                        "effort": "small",
                        "epic": epic_id
                    },
                    {
                        "id": "story-003",
                        "title": "Documentation update",
                        "description": "As a user, I want updated documentation so that I can understand the new features",
                        "acceptance_criteria": [
                            "API documentation updated",
                            "User guides revised",
                            "Migration guide created",
                            "Examples provided"
                        ],
                        "priority": "medium",
                        "effort": "small",
                        "epic": epic_id
                    }
                ],
                "next_steps": [
                    "Prioritize stories for development",
                    "Assign stories to development team",
                    "Set up development environment",
                    "Begin implementation"
                ]
            }
        except Exception as e:
            logger.error(f"Story creation error: {e}")
            raise HTTPException(status_code=500, detail=f"Story creation failed: {str(e)}")

    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8001)
