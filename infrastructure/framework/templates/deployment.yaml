apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.name }}"
  namespace: "{{ .Values.namespace }}"
  labels:
    app: "{{ .Values.name }}"
    version: "{{ .Values.version }}"
    component: "{{ .Values.component }}"
    tier: "{{ .Values.tier }}"
    environment: "{{ .Values.environment }}"
    {{- include "common.labels" . | nindent 8 }}
  annotations:
    {{- include "common.annotations" . | nindent 8 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.name }}"
        version: "{{ .Values.version }}"
        component: "{{ .Values.component }}"
        tier: "{{ .Values.tier }}"
        environment: "{{ .Values.environment }}"
        {{- include "common.labels" . | nindent 12 }}
      annotations:
        {{- include "common.annotations" . | nindent 12 }}
    spec:
      serviceAccountName: "{{ .Values.name }}-sa"
      containers:
      - name: "{{ .Values.name }}"
        image: "{{ .Values.registry }}/{{ .Values.image }}:{{ .Values.tag }}"
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.port }}
          name: http
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.secrets }}
        {{- range $key, $value := .Values.secrets }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: "{{ $.Values.name }}-secrets"
              key: {{ $value }}
        {{- end }}
        {{- end }}
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory }}
            cpu: {{ .Values.resources.requests.cpu }}
          limits:
            memory: {{ .Values.resources.limits.memory }}
            cpu: {{ .Values.resources.limits.cpu }}
        livenessProbe:
          httpGet:
            path: {{ .Values.health.path }}
            port: {{ .Values.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.health.initialDelaySeconds }}
          periodSeconds: {{ .Values.health.periodSeconds }}
          timeoutSeconds: {{ .Values.health.timeoutSeconds }}
          failureThreshold: {{ .Values.health.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.health.path }}
            port: {{ .Values.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.health.readinessDelaySeconds }}
          periodSeconds: {{ .Values.health.periodSeconds }}
          timeoutSeconds: {{ .Values.health.timeoutSeconds }}
          failureThreshold: {{ .Values.health.failureThreshold }}
        securityContext:
          runAsNonRoot: {{ .Values.security.runAsNonRoot }}
          {{- if .Values.security.runAsUser }}
          runAsUser: {{ .Values.security.runAsUser }}
          {{- end }}
          {{- if .Values.security.runAsGroup }}
          runAsGroup: {{ .Values.security.runAsGroup }}
          {{- end }}
          allowPrivilegeEscalation: {{ .Values.security.allowPrivilegeEscalation }}
          {{- if .Values.security.readOnlyRootFilesystem }}
          readOnlyRootFilesystem: {{ .Values.security.readOnlyRootFilesystem }}
          {{- end }}
          {{- if .Values.security.seccompProfile }}
          seccompProfile:
            type: {{ .Values.security.seccompProfile }}
          {{- end }}
          capabilities:
            {{- if .Values.security.capabilities.add }}
            add:
            {{- range .Values.security.capabilities.add }}
            - {{ . }}
            {{- end }}
            {{- end }}
            {{- if .Values.security.capabilities.drop }}
            drop:
            {{- range .Values.security.capabilities.drop }}
            - {{ . }}
            {{- end }}
            {{- end }}
        {{- if .Values.volumeMounts }}
        volumeMounts:
        {{- range .Values.volumeMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          {{- if .readOnly }}
          readOnly: {{ .readOnly }}
          {{- end }}
        {{- end }}
        {{- end }}
      {{- if .Values.volumes }}
      volumes:
      {{- range .Values.volumes }}
      - name: {{ .name }}
        {{- if .emptyDir }}
        emptyDir:
          sizeLimit: {{ .emptyDir.sizeLimit }}
        {{- end }}
        {{- if .configMap }}
        configMap:
          name: {{ .configMap.name }}
        {{- end }}
        {{- if .secret }}
        secret:
          secretName: {{ .secret.secretName }}
        {{- end }}
      {{- end }}
      {{- end }}
      securityContext:
        {{- if .Values.security.fsGroup }}
        fsGroup: {{ .Values.security.fsGroup }}
        {{- end }}
        runAsNonRoot: {{ .Values.security.runAsNonRoot }}
      restartPolicy: Always
