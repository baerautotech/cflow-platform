name: BMAD API Service Build and Deploy

on:
  push:
    branches: [main, dev]
    paths:
      - 'bmad_api_service/**'
      - 'vendor/bmad/**'
      - 'infrastructure/docker/Dockerfile.bmad-api'
      - 'infrastructure/docker/requirements-bmad.txt'
      - 'infrastructure/kubernetes/bmad-api-*.yaml'
      - 'infrastructure/kubernetes/grafana-dashboard-provisioning.yaml'
      - '.github/workflows/bmad-api-build.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'bmad_api_service/**'
      - 'vendor/bmad/**'
      - 'infrastructure/docker/Dockerfile.bmad-api'
      - 'infrastructure/docker/requirements-bmad.txt'
      - 'infrastructure/kubernetes/bmad-api-*.yaml'
      - 'infrastructure/kubernetes/grafana-dashboard-provisioning.yaml'
      - '.github/workflows/bmad-api-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: baerautotech/bmad-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/baerautotech/cflow-platform.git .
          git checkout ${{ github.sha }}

      - name: Set up Docker Buildx
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Log in to Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u "${{ github.actor }}" --password-stdin

      - name: Build and push Docker image
        run: |
          # Extract metadata
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          
          # Build and push
          docker buildx build \
            --platform linux/amd64 \
            --file infrastructure/docker/Dockerfile.bmad-api \
            --tag $IMAGE_TAG \
            --tag $LATEST_TAG \
            --push \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

  deploy-development:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/baerautotech/cflow-platform.git .
          git checkout ${{ github.sha }}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy BMAD API to development
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-monitoring.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-dashboard.yaml
          kubectl apply -f infrastructure/kubernetes/grafana-dashboard-provisioning.yaml -n cerebral-monitoring
          kubectl rollout restart deployment/grafana -n cerebral-monitoring
          kubectl rollout status deployment/bmad-api-enhanced -n cerebral-development --timeout=300s

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/baerautotech/cflow-platform.git .
          git checkout ${{ github.sha }}

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy BMAD API to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-monitoring.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-dashboard.yaml
          kubectl apply -f infrastructure/kubernetes/grafana-dashboard-provisioning.yaml -n cerebral-monitoring
          kubectl rollout restart deployment/grafana -n cerebral-monitoring
          kubectl rollout status deployment/bmad-api-enhanced -n cerebral-production --timeout=300s
