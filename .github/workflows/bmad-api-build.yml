name: BMAD API Service Build and Deploy

on:
  push:
    branches: [main, dev]
    paths:
      - 'bmad_api_service/**'
      - 'vendor/bmad/**'
      - 'infrastructure/docker/Dockerfile.bmad-api'
      - 'infrastructure/docker/requirements-bmad.txt'
      - 'infrastructure/kubernetes/bmad-api-*.yaml'
      - 'infrastructure/kubernetes/grafana-dashboard-provisioning.yaml'
      - '.github/workflows/bmad-api-build.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'bmad_api_service/**'
      - 'vendor/bmad/**'
      - 'infrastructure/docker/Dockerfile.bmad-api'
      - 'infrastructure/docker/requirements-bmad.txt'
      - 'infrastructure/kubernetes/bmad-api-*.yaml'
      - 'infrastructure/kubernetes/grafana-dashboard-provisioning.yaml'
      - '.github/workflows/bmad-api-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: baerautotech/bmad-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.bmad-api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy BMAD API to development
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-monitoring.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-dashboard.yaml
          kubectl apply -f infrastructure/kubernetes/grafana-dashboard-provisioning.yaml
          kubectl rollout restart deployment/grafana -n monitoring
          kubectl rollout status deployment/bmad-api-enhanced -n cerebral-development --timeout=300s

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy BMAD API to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-deployment.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-monitoring.yaml
          kubectl apply -f infrastructure/kubernetes/bmad-api-enhanced-dashboard.yaml
          kubectl apply -f infrastructure/kubernetes/grafana-dashboard-provisioning.yaml
          kubectl rollout restart deployment/grafana -n monitoring
          kubectl rollout status deployment/bmad-api-enhanced -n cerebral-production --timeout=300s
