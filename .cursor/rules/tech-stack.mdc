# Tech Stack & Development Environment Rules

## Core Development Stack

### Package Management & Environment
- **Package Manager**: `uv` (NEVER use pip)
- **Virtual Environment**: `.venv` directory managed by uv
- **Python Version**: 3.11+ (requires-python = ">=3.11")
- **Build System**: hatchling (hatchling>=1.25)
- **Dependency Management**: uv.lock file for reproducible builds

### Core Dependencies
- **HTTP Client**: httpx>=0.26.0
- **Data Validation**: pydantic (via dependencies)
- **Web Framework**: FastAPI (full Python stack)
- **ASGI Server**: uvicorn
- **Vector Database**: ChromaDB (local), Supabase Postgres + pgvector (remote)
- **Embeddings**: sentence-transformers>=5.1.0 with hardware-agnostic GPU accelerator
- **Testing**: pytest>=8.0.0, pytest-asyncio>=0.23.6
- **Database**: supabase>=2.18.1, psycopg[binary]>=3.2.1
- **Secrets**: hvac>=2.3.0 (HashiCorp Vault)
- **Caching**: redis>=6.4.0

### Hardware Acceleration
- **Apple Silicon**: Optimized MPS embeddings for local development
- **NVIDIA CUDA**: GPU acceleration for cluster deployments
- **CPU Fallback**: Automatic fallback when GPU unavailable
- **Device Selection**: Prefer `cuda` → `mps` → `cpu`

## Architecture & Deployment

### MCP (Model Context Protocol)
- **Transport**: stdio servers (local), HTTP (cluster)
- **Tool Registry**: Centralized in `cflow_platform.core.tool_registry`
- **WebMCP Server**: FastAPI + Uvicorn on cerebral cluster
- **Security**: JWT-based auth with tenant isolation

### Infrastructure
- **Container Runtime**: Kubernetes with cert-manager for TLS
- **Web Server**: nginx (reverse proxy for WebMCP)
- **Storage**: MinIO S3 (self-hosted), Postgres (Supabase)
- **Secrets Management**: HashiCorp Vault
- **Monitoring**: Structured JSON outputs, iteration checkpoints in `.cerebraflow/`

### Frontend Stack
- **Web**: React Native + React Native Web + TypeScript
- **Mobile/Wearable**: React Native
- **Cross-platform**: Single codebase for web/mobile/wearable

## Development Practices

### CLI Tools
- **Entry Points**: Defined in `pyproject.toml` [project.scripts]
- **Naming Convention**: `cflow-*` prefix for all CLI commands
- **Testing**: pytest with size caps via `uv`
- **Sandboxing**: CPU/memory/time limits, filesystem allowlist, no network

### Code Organization
- **Package Structure**: `cflow_platform/` with modular handlers
- **Tool Handlers**: Separate modules in `cflow_platform/handlers/`
- **Core Services**: `cflow_platform/core/` for shared functionality
- **CLI Commands**: `cflow_platform/cli/` for command-line tools

### Security & Compliance
- **Input Validation**: All external inputs MUST be validated
- **Authentication**: JWT-based with tenant isolation
- **Secrets**: NEVER hardcode secrets, use Vault only
- **Network**: Network policies, HTTPS enforcement
- **Sandboxing**: Isolated execution environments

## BMAD Integration

### Workflow Engine
- **BMAD Core**: Node v20 headless services vendored into `vendor/bmad/`
- **HTTP API Facade**: BMAD agents exposed via HTTP API on cerebral cluster
- **Project Detection**: Automatic greenfield vs brownfield workflow routing
- **Expansion Packs**: Dynamic pack loading and domain-specific agents

### Document Management
- **PRD/Architecture/Story**: BMAD document lifecycle management
- **HIL System**: Interactive sessions, elicitation, approval workflows
- **Knowledge Graph**: Supabase + pgvector for document indexing and RAG

## Environment Configuration

### Development
- **Local Fallback**: When cluster unavailable
- **Provider Abstraction**: Environment-driven (no AWS dependency)
- **Apple Silicon**: MPS acceleration for local development
- **ChromaDB**: Local vector database for development

### Production
- **Cerebral Cluster**: Private server cluster of nodes
- **Transport**: HTTP/gRPC (env-configured)
- **Multi-tenant**: Tenant isolation and quotas
- **Observability**: SLO dashboards, HPA autoscaling

## Prohibited Practices

### Package Management
- ❌ **NEVER use pip** - Always use `uv`
- ❌ **NEVER use pip install** - Use `uv add` or `uv sync`
- ❌ **NEVER use pip freeze** - Use `uv export` or `uv.lock`

### Security
- ❌ **NEVER hardcode secrets** - Use Vault or environment variables
- ❌ **NEVER use mutable image tags** - Only deploy `:<sha>` images
- ❌ **NEVER expose secrets in logs** - Sanitize all output

### Architecture
- ❌ **NEVER import backend code into MCP** - Always call via HTTPS
- ❌ **NEVER use local MCP servers** - All MCP runs on cluster
- ❌ **NEVER use AWS dependencies** - Environment-driven provider abstraction

## Tool Integration

### MCP Servers (Extensibility)
- **run_python**: Sandboxed Python evaluation (`@pydantic/mcp-run-python`)
- **internet_search**: Real-time search via `duckduckgo-mcp-server`
- **context7.docs**: Library docs via Context7 for symbol/API lookups
- **desktop_commander**: Local notifications (optional, off by default)

### Optional Profiles
- **AWS MCP Profile**: Off by default, documented for portability
- **Desktop Commander**: Off by default, guarded desktop utilities

## Compliance & Standards

### Code Quality
- **VEG Standards**: Production-ready, zero placeholders/TODOs, testable
- **AEMI Standards**: Atomic tasks, micro-validations, gated transitions
- **SRP Compliance**: Single Responsibility Principle for all components
- **Documentation**: Documentation-first approach

### Testing & Validation
- **Acceptance Tests**: Clear interfaces and success criteria
- **Performance SLOs**: Validated under performance requirements
- **Security Scanning**: Integrated into pipeline
- **Compliance Evidence**: Automated collection where possible