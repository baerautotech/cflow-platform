---
description: SSH optimization usage guidelines for Cerebral cluster remote system configuration
globs:
  - '*.sh'
  - '**/*.yml'
  - '**/*.yaml'
  - 'ansible.cfg'
  - '.ssh/config'
  - '**/inventories/*.yml'
---

# SSH Optimization Usage for Remote System Configuration

## What We Have Installed

Our Cerebral cluster (10.34.0.10-31) and all workstations now have SSH optimization with:
- **Connection multiplexing** (ControlMaster/ControlPersist) - eliminates connection overhead
- **Mitogen plugin** for Ansible - provides 2-4x faster execution
- **Keep-alive settings** - prevents connection drops
- **Optimized timeouts** - faster failure detection

## How to Connect to Remote Systems

### SSH Connections (Use IP Addresses)
Always use IP addresses instead of hostnames for external connections:

```bash
# Direct SSH to cluster machines
ssh -i ~/.ssh/cerebral_xo_ed25519 -o StrictHostKeyChecking=no cerebral@10.34.0.10
ssh -i ~/.ssh/cerebral_xo_ed25519 -o StrictHostKeyChecking=no cerebral@10.34.0.11
ssh -i ~/.ssh/cerebral_xo_ed25519 -o StrictHostKeyChecking=no cerebral@10.34.0.12
```

### Why We Use These Options
- `-i ~/.ssh/cerebral_xo_ed25519` - Uses our specific SSH key
- `-o StrictHostKeyChecking=no` - Skips host key verification (internal network)
- IP addresses - Avoids DNS resolution issues from external workstations

## Ansible Configuration Usage

### Running Ansible Playbooks
```bash
# Standard Ansible commands now use optimized connections
ansible all -i ansible/inventories/development.yml -m ping
ansible-playbook -i ansible/inventories/development.yml site.yml
```

### What Happens Behind the Scenes
1. **First connection** establishes a control master socket
2. **Subsequent connections** reuse the same socket (80-90% faster)
3. **Mitogen strategy** optimizes task execution across hosts
4. **Keep-alive** maintains connections during long operations

## Connection Monitoring

### Check Active Connections
```bash
# View multiplexed connections
ls -la ~/.ssh/controlmasters/

# Monitor connection count
ss -tn state established '( dport = :22 or sport = :22 )' | wc -l
```

### Performance Verification
```bash
# Time Ansible execution (should be 2-4x faster)
time ansible all -m ping

# Test connection reuse
ssh 10.34.0.10 "echo 'Connection 1'" && ssh 10.34.0.10 "echo 'Connection 2'"
```

## Troubleshooting

### Connection Issues
```bash
# Clean up stale connections
rm -f ~/.ssh/controlmasters/*

# Reset SSH agent
ssh-add -D
ssh-add ~/.ssh/cerebral_xo_ed25519

# Test individual connection
ssh -i ~/.ssh/cerebral_xo_ed25519 -o ConnectTimeout=10 -o BatchMode=yes cerebral@10.34.0.10
```

### Ansible Issues
```bash
# Test Ansible connectivity
ansible all -i ansible/inventories/development.yml -m ping -v

# Check Mitogen is working
ansible-playbook -i ansible/inventories/development.yml --strategy=mitogen_linear site.yml
```

## Key Benefits We Achieved

1. **Eliminated connection blocking** - No more tmux dependency
2. **Faster deployments** - 2-4x speed improvement with Mitogen
3. **Reduced overhead** - 80-90% reduction in SSH connection time
4. **Better reliability** - Keep-alive prevents connection drops
5. **Consistent performance** - Optimized across all 7 cluster machines

## When to Use Each Method

- **SSH for single commands**: Use direct SSH with the optimized key
- **Ansible for multiple hosts**: Use standard Ansible commands (automatically optimized)
- **Long-running tasks**: Connections persist automatically via ControlPersist
- **Debugging**: Use verbose flags (-v) to see connection multiplexing in action